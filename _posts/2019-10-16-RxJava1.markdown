---
title: "[RxJava] RxJava 기초 1"
layout: post
date: 2019-10-16 13:10
image: /assets/images/markdown.jpg
headerImage: false
tag:
- RxJava
category: blog
author: kyudongPark
description: RxJava의 기초에 대해
---

이번에는 **RxJava** 에 대해 알아보도록 하겠습니다. 
이 글은 현재는 지원하지 않는 RxJava version 1을 토대로 작성한 정말 기초적인 흐름을 정리한 것이니, 더 자세한 것은 이후에 포스팅 하도록 하겠습니다. 

## RxJava란? 

**RxJava** 는 **리액티브 자바(Reactive Java)** 에서 생겨난 말이며 함수형 프로그래밍이다. 

프로그래밍에는 객체지향(OOP), 함수(Function), 명령형(Imperative) 등 여러가지 기법이 있습니다.  
이러한 기법들을 보통 패러다임이라고 합니다.
**RxJava** 는 그 중 **Reactive Programming(리액티브 프로그래밍)** 패러다임을 자바에서 사용한 것입니다.  
자바는 객체지향(OOP) 프로그래밍을 사용하는 언어이고 함수형 프로그래밍(functional programming)을 사용하는 대표적인 언어는 파이썬, node.js 등이 있습니다.

그렇다면 **Reactive** 는 무슨 의미일까요?
* Reactive란 외부에서 자극을 받아 이에 대해 반응을 하는 것입니다.  
<br>

그렇다면 RxJava는 왜 생겨난 걸까요?

Reactive 프로그래밍을 자바에서 사용해야 하기 때문입니다. 함수형 프로그래밍이기에 **부수효과(Side Effect)** 가 없는 순수함수를 스레드에 안전합니다.
그래서 요즘의 자바는 객체지향과 함수형, 리액티브와 같은 다양한 프로그래밍 기법을
같이 사용하여 개발합니다. 

<br>

넷플릭스에서 RxJava를 만들게 된 중요한 이유 3가지가 있다고 합니다.
* Embrance Concurrency (동시성을 적극적으로 끌어안는다)
* Java Futures are expensive to compose (Future를 조합하기 어렵다)
* Callbacks have their own problems (콜백의 문제점) 

<br>

넷플릭스는 자바는 동시성 처리를 하는데 번거로움이 있어 서비스 계층에서 동시성을 적극적으로 끌어안았고, 
요청을 처리할 때 여러 비동기 흐름을 생성하고 결과를 취합하여 최종 리턴하는 방식으로 내부 로직을 변경했다.  
또한 콜백 지옥에서 벗어나기 위해 콜백을 사용하지 않는 방향으로 설계하였다고 합니다.  

반응형 프로그래밍은 위 3가지 문제를 비동기 연산을 filtering, transformation, combination 하여 해결할 수 있다.

<br>

## 반응형 프로그래밍
그렇다면, **반응형 프로그래밍** 은 왜 필요한 것일까요?  
객체지향인 자바와 비교해서 알아보겠습니다.

**자바 프로그래밍**
* Pull 방식 

<br>

**반응형 프로그래밍**
* Push 방식
* 함수형 프로그래밍의 지원 (side effect X) 

<br>

즉, 자바에서 함수형 프로그래밍을 사용하기 위함입니다. 

반응형 프로그래밍의 기본은 **Observables** 와 **Subscriber** 이다. Observable은 아이템을 **방출(emit)**하고 Subscriber는 이 아이템을 **소비** 한다. 
Observable은 아이템을 내보내고( **onNext( )** ) 성공적으로 완료( **onComplete( )** ) 하거나 에러가 나서( **onError( )** ) 종료되는 패턴을 가지고 있다.
즉, 각 subscriber에 대해 Observable은 subscriber.onNext() 를 콜하고 subscriber.onComplete() 또는 onError()를 호출한다.
디자인 패턴 중 하나인 옵저버 패턴(Observer Pattern)과 비슷하다고 생각할 수 있지만, 다른 점이 있습니다. Observable은 누가 subscribe를
하지 않으면 아이템을 내보내지 않을 때가 있습니다. 이를 **cold Observable** 라고 부른다. 

Cold, Hot Observable은 다른 포스트를 참고하면 좋을 것 같습니다! [Hot, Cold Observable](http://kyudong3.github.io)

<br>

이제 RxJava가 대충 어떤 것인지 알았다면 코드를 보면서 RxJava의 기초에 대해 알아보겠습니다. 

<br>
<br>

## RxJava 기초부터 차근차근   

[Rxjava](https://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/) 를 토대로 작성하였습니다. 
<br>
### 1. 우선 Observable을 생성해보자

**Observable은 데이터를 제공하는 생산자로**
* 새로운 데이터를 전달하는 **onNext()** 
* 스트림을 종료하는 **onCompleted()**
* 에러 신호를 전달하는 **onError()** 
의 3가지 행동을 한다. 


```java
// Observable은 "Hello, KD!" 를 방출하고 complete 한다.
// Observable.create() 을 통해 Observable 생성 
// 구독이 발생하면 call() 함수 실행 
Observable<String> myObservable = Observable.create(
        new Observable.OnSubscribe<String>() {
            @Override
            public void call(Subscriber<? super String> subscriber) {
                subscriber.onNext("Hello, KD!");
                subscriber.onCompleted();
            }
        }
);
```

<br>

### 2. 이번에는 Subscriber을 생성해보자 

**Subscriber** 는
* 데이터 소비
* Observable이 만드는 스트림에 반응하여 처리할 수 있도록 대칭적으로 인터페이스가 구성


```java
// Observable에 의해 방출된 각각의 스트림을 onNext()에서 단순히 프린트 하는 코드 
Subscriber<String> mySubscriber = new Subscriber<String>() {
    @Override
    public void onCompleted() { }

    @Override
    public void onError(Throwable e) { }

    @Override
    public void onNext(String s) { System.out.println(s); }
};
```

<br>

### 3. 이제 Observable과 Subscriber를 연결해보자

* **subscribe()** 함수를 통해 Observable과 구독자 연결
* **Subscription(구독)** 이 생성되면 myObservable은 Subscriber의 onNext()와 onComplete() 메소드 호출
* mySubscriber는 "Hello, KD!" 출력하고 종료 


```java
myObservable.subscribe(mySubscriber);
```

<br>

정말 기초적인 "Hello, KD" 를 출력해주는 코드입니다.  
하지만 간단한 출력치고는 코드가 좀 긴 것 같습니다..?

그래서 이번에는 Rx의 **생성 메소드** 를 사용해서 코드를 단순하게 바꾸어 보겠습니다. 

<br>

### 4. Just()

**Just()** 는
* Observable의 **생성 메소드** 중 하나 
* 인수로 전달된 객체로 **Observable을 생성** 한다
* 복수로 전달된 경우는 갯수만큼 **onNext()** 가 호출되어 형이 통일되지 않더라도 에러가 나지 않는다
* 데이터 하나를 발행한 뒤 종료한다 

**just()** 를 사용하면 위의 Observable 코드가 아래와 같이 바뀌게 됩니다. 

```java
Observable<String> myObservable = Observable.just("Hello, KD!");
```

<br> 
또한, 복수로 전달된 경우에는 아래와 같이 사용할 수 있습니다.  
Integer와 String이 같이 전달되었음에도 에러 X 
```java
Observable.just(1, 2, "Hello")
        .subscribe(num -> System.out.println("onNext: " + num), 
                throwable -> System.out.println("onError"), 
                () -> System.out.println("onComplete"));
```


또한 RxJava 에서는 편의를 위해 사용하지 않는 누락된 인터페이스를 제공합니다.  
우리는 **mySubscriber** 에서 onNext()만 사용하고 있으므로 **Action1** 함수를 통해 

```java
Action1<String> onNextAction = new Action1<String>() {
    @Override
    public void call(String s) {
        System.out.println(s);
    }
};
```

위와 같이 mySubscriber 코드를 변경할 수 있습니다. 

그리고 이전의 Subscription이 아래와 같이 변합니다. 

```java
myObservable.subscribe(onNextAction);
```

<br>

### 5. 연쇄(chaining)
<br>
이제 위의 메소드들을 **연쇄(chaining)** 해서 변수들을 제거할 것입니다!
```java
Observable.just("Hello, KD!")
        .subscribe(new Action1<String>() {
            @Override
            public void call(String s) {
                System.out.println(s);
            }
        }
```

<br>


### 6. 람다(lambda 사용)
<br>
마지막으로 **람다**를 사용해서 코드를 고치면 

```java
Observable.just("Hello, KD!")
        .subscribe(s -> System.out.println(s));
```

이렇게 간단한 코드가 완성됩니다!!!!  
**"Hello, KD!"** 를 출력하기 위해 앞에서는 10줄 이상이 필요했는데 Rx를 사용하면 2줄만으로 출력할 수 있게 됩니다!! 

<br>
<br>

다음 포스트에서는 **Operator(연산자)** 를 통해 데이터를 어떻게 다루는지 알아보도록 하겠습니다. 


