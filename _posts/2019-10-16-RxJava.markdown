---
title: "[RxJava] RxJava 기초 1"
layout: post
date: 2019-10-16 13:10
image: /assets/images/markdown.jpg
headerImage: false
tag:
- RxJava
category: blog
author: kyudongPark
description: RxJava의 기초에 대해
---

이번에는 <span style="color:blue">**RxJava**</span> 에 대해 알아보도록 하겠습니다.  

## RxJava란? 

**RxJava** 는 **리액티브 자바(Reactive Java)** 에서 생겨난 말이며 함수형 프로그래밍이다. 

프로그래밍에는 객체지향(OOP), 함수(Function), 명령형(Imperative) 등 여러가지 기법이 있습니다. 이러한 기법들을 보통 패러다임이라고 합니다.
RxJava는 그 중 Reactive Programming(리액티브 프로그래밍) 패러다임을 자바에서 사용한 것입니다. 자바는 객체지향(OOP) 프로그래밍을 사용하는 언어이고
함수형 프로그래밍(functional programming)을 사용하는 대표적인 언어는 파이썬, node.js 등이 있습니다.  
그렇다면 Reactive는 무슨 의미일까요? Reactive란 외부에서 자극을 받아 이에 대해 반응을 하는 것입니다.  

그렇다면 RxJava는 왜 생겨난 걸까요?  
Reactive 프로그래밍을 자바에서 사용해야 하기 때문입니다. 함수형 프로그래밍이기에 부수효과(Side Effect) 가 없는 순수함수를 스레드에 안전합니다.
그래서 요즘의 자바는 객체지향과 함수형, 리액티브와 같은 다양한 프로그래밍 기법을
같이 사용하여 개발합니다. 

넷플릭스에서 RxJava를 만들게 된 중요한 이유 3가지가 있다고 합니다.
* Embrance Concurrency (동시성을 적극적으로 끌어안는다)
* Java Futures are expensive to compose (Future를 조합하기 어렵다)
* Callbacks have their own problems (콜백의 문제점) 

자바는 동시성 처리를 하는데 번거로움이 있어 서비스 계층에서 동시성을 적극적으로 끌어안았다. 요청을 처리할 때 여러 비동기 흐름을 생성하고 
결과를 취합하여 최종 리턴하는 방식으로 내부 로직을 변경했다. 또한 콜백 지옥에서 벗어나기 위해 콜백을 사용하지 않는 방향으로 설계하였다고 합니다.
반응형 프로그래밍은 비동기 연산을 filtering, transformation, combination 하여 이 3가지 문제를 해결할 수 있다.  


## 반응형 프로그래밍
그렇다면, 반응형 프로그래밍은 왜 필요한 것일까요? 객체지향인 자바와 비교해서 알아보겠습니다.

자바 프로그래밍 
* Pull 방식 

반응형 프로그래밍
* Push 방식
* 함수형 프로그래밍의 지원 (side effect X) 

즉, 자바에서 함수형 프로그래밍을 사용하기 위함입니다. 

반응형 프로그래밍의 기본은 Observables 와 Subscriber 이다. Observable은 아이템을 방출(emit)하고 Subscriber는 이 아이템을 소비한다. 
Observable은 아이템을 내보내고( onNext() ) 성공적으로 완료( onComplete() ) 하거나 에러가 나서( onError ) 종료되는 패턴을 가지고 있다.
즉, 각 subscriber에 대해 Observable은 subscriber.onNext() 를 콜하고 subscriber.onComplete() 또는 onError()를 호출한다.
디자인 패턴 중 하나인 옵저버 패턴(Observer Pattern)과 비슷하다고 생각할 수 있지만, 다른 점이 있습니다. Observable은 누가 subscribe를
하지 않으면 아이템을 내보내지 않을 때가 있습니다. 이를 cold Observable 라고 부른다. 

Cold, Hot Observable은 다른 포스트를 참고하면 좋을 것 같습니다!  
[Hot, Cold Observable](http://kyudong3.github.io)



