---
title: "코틀린의 Scope function(also, let, with, apply, run)"
layout: post
date: 2019-06-30 15:48
image: /assets/images/markdown.jpg
headerImage: false
tag:
- kotlin
- Java
- android
category: blog
author: kyudongPark
description: Difference of also, let, with, apply, run in Kotlin
---

그동안 코틀린을 사용하면서 헷갈렸던 run, with, apply, also, let에 대해서 알아보는 시간을 가지도록 하겠습니다.

자바에는 없지만 코틀린에서는 기본적으로 제공하는 함수 라이브러리들이 있습니다.  그 중에 run, with, apply, also, let은 Scope Function에 해당됩니다.

왜 scope function을 사용하는 걸까요? **객체에 접근하는 방법을 간단하게 해서 코드를 간결하게 하고 가독성을 높일 수 있기 때문입니다.**
그 전에 scope function을 이해하기 위해서 리시버와 람다함수에 대해 잠깐 소개하도록 하겠습니다.
#Scope function을 사용하면 두 개의 객체를 넘겨주게 되는데 바로 **리시버** 와 **람다함수** 입니다.

```kotlin
Person("KyuDong", 27, "Korea").let {
  println(it)
  it.moveTo("London")
  it.incrementAge()
  println(it)
}
```
이러한 scope function을 적용한 코드가 있다고 가정해봅시다.
간단히 말해서 Person 객체를 리시버라고 하고 let 다음 블록 { ... } 을 람다함수라고 합니다. 
위 예제에서는 람다함수 안에서 리시버를 it의 형태로 접근하고 있네요!

그럼 이제 이 함수들이 각각 어떤 역할을 하는지 알아보겠습니다.

기본적으로 이 함수들은 객체의 코드 블럭을 실행한다는 같은 역할을 가지고 있습니다. 
이들 사이에 가장 중요한 2가지 차이점은 바로
* 블록 안에서 객체에 접근하는 방식
* 전체식의 결과값
입니다.

객체에 접근하는 방식은 **this**와 **it**이 있습니다. 




