---
title: "[Algorithm] 조합(Combination)"
layout: post
date: 2019-10-18 19:10
image: /assets/images/markdown.jpg
headerImage: false
tag:
- Algorithm
category: blog
author: kyudongPark
description: 조합(Combination)에 대해서 정리한 글
---

이번 프스트에는 **조합(Combination)** 에 대해 알아보도록 하겠습니다. 

## 조합(Combination) 

알고리즘 문제를 풀다 보면 조합과 순열을 이용해서 문제를 풀어야 하는 경우를 다수 보게 된다. 먼저 조합에 대해 알아보겠습니다.  
보통 알고리즘 문제에서는 2가지 경우를 물어봅니다. **조합의 갯수* 와 **조합의 나열**

우선, 조합의 정의는  
> **서로 다른 n개의 원소 중에서 k개를 뽑는(취하는) 것**
우리는 여기서 순서와 상관없이 뽑는 경우를 다룰 것입니다.

2가지 경우가 있다. 
* 중복이 없는 조합
* 중복이 있는 조합 (중복 조합)

우선 중복이 없는 조합에 대해 알아보겠습니다. 

점화식을 사용한 조합 구하는 공식
> **nCr = <em><sub>n-1</sub></em>C<em><sub>r-1</sub></em> + <em><sub>n-1</sub></em>C<em><sub>r</sub></em>**

* n은 원소의 갯수
* r은 뽑는 갯수

중, 고등학생 때에는 점화식을 이용하기 보다는 따로 팩토리얼을 사용해서 풀었었지만 앞으로는 위 점화식을 이용할 것이다.  

점화식이 위와 같이 나올 수 있는 이유는 다음과 같다. 

* **특정한 원소를 포함하고 뽑을 때**
* **특정한 원소를 포함하지 않고 뽑을 때**

예를 들어,  
{ 1 2 3 4 } 4개의 원소가 있고 이 중 2개의 숫자를 뽑는다고 하면 <sub>4</sub>C<sub>2</sub>가 된다. 나올 수 있는 경우의 수는 (1 2), (1 3), (1 4), (2 3), (2 4), (3, 4) 이다. 이 경우는 위와 같이 특정한 원소를 포함하거나 포함하지 않고 뽑는 경우로 나눌 수 있다.  
* (1 2), (1 3), (1 4) 의 1을 포함하는 경우
* (2 3), (2 4), (3 4) 와 같이 1을 포함하지 않는 경우
    
1을 포함하는 경우에는 (1 ?)와 같이 1을 이미 뽑았으므로 1을 제외한 { 2 3 4 } 3개의 원소 중에서 1개의 숫자를 뽑으면 된다. 따라서 <sub>3</sub>C<sub>1</sub>로 표현할 수 있다.  
1을 포함하지 않는 경우는 (? ?)와 같이 1을 제외한 { 2 3 4 } 3개의 원소 중에서 2개의 숫자를 뽑으면 된다. 따라서 
<sub>3</sub>C<sub>2</sub>로 표현할 수 있다. 

따라서 **<sub>4</sub>C<sub>2</sub> = <sub>3</sub>C<sub>1</sub> + <sub>3</sub>C<sub>2</sub>** 가 성립한다. 

즉, 트리의 형태로 보게 된다면  
우선, 1을 선택한 경우와 선택하지 않은 경우로 나뉜다. 먼저 1을 선택한 경우에는 다음 뽑는 원소로 2를 선택할 경우와 선택하지 않을 경우로 나뉘게 된다. 1을 선택하지 않은 경우에는 스킵하고 2를 선택할 경우와 선택하지 않는 경우로 나뉜다. 이렇게 쭉쭉 트리의 형태로 뻗어나가게 됩니다. 

    
<br>

재귀함수를 사용한 코드를 통해 살펴보도록 하겠습니다. 재귀함수를 이용하여 모든 경우를 탐색하도록 합니다.  
재귀(recursion)에서 중요한 것은 재귀의 종료와 탈출 조건이 있어야 하는 것입니다.

먼저 **조합의 갯수** 는

```java
    static int combinationNum(int n, int r) {
        if (r == 0 || n == r) {
            return 1;
        } else {
            return combinationNum(n - 1, r - 1) + combinationNum(n - 1, r);
        }
    }
```



